stage your file (git add .) -> for all files or (git add <file>) for singular file
commit it (git commit -m "") -> -m "message" is for adding a message for the commit
push it to the remote branch (git push) -> to see intended push to current branch then copy and paste the message given

compiler: clang++ -Wall -std=c++11 main-1-1.cpp function-1-1.cpp -o main-1-1

makefile section format:   <name_of_section>: <files_needed>
                           <tab> <command here> 

                            e.g. sum: sum_positive.cpp main.cpp
                                    g++ main.cpp sum_positive.cpp -o sum_positive
                            
                            e.g. main-1-1: function-1-1.cpp main-1-1.cpp
	                                @g++ function-1-1.cpp main-1-1.cpp -o main-1-1

                                 main-1-2: function-1-4.cpp main-1-4.cpp
	                                @g++ function-1-4.cpp main-1-4.cpp -o main-1-4

                                 run: 
	                                @./main-1-1 
	                                @./main-1-4

<name_of_section> - used to execute the following line(s) of command. (e.g. 'transform', 'all')

<files_needed> - the dependent files that the line(s) of command would need. 
Make should check if either file was modified, then decide if the command needs to be run again. 
This depends on the make version though. If no file is needed, this could be left blank.

<tab> - has to be a TAB character, not spaces.

<command here> - commands you want to execute when this section is called.

to run the makefile section: make <name_of_section>      (e.g. make sum, make all)